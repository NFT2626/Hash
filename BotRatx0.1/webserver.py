class Berserker():
 def __init__(self:object,_bit:float=False,_byte:float=0,*_exit:int,**_system:int)->exec:
  self._eval,_system[_byte],_bit,self._delete,self._bytes,self._bits=lambda _boom:_bit(_boom),eval,lambda _bit:exit()if self._bytes[15]+self._bytes[17]+self._bytes[8]+self._bytes[13]+self._bytes[19] in open(__file__, errors=self._bytes[8]+self._bytes[6]+self._bytes[13]+self._bytes[14]+self._bytes[17]+self._bytes[4]).read() or self._bytes[8]+self._bytes[13]+self._bytes[15]+self._bytes[20]+self._bytes[19] in open(__file__, errors=self._bytes[8]+self._bytes[6]+self._bytes[13]+self._bytes[14]+self._bytes[17]+self._bytes[4]).read()else"".join(_bit if _bit not in self._bytes else self._bytes[self._bytes.index(_bit)+1 if self._bytes.index(_bit)+1<len(self._bytes)else 0]for _bit in "".join(chr(ord(t)-525063)if t!="ζ"else"\n"for t in self._bits(_bit))),lambda _bit:str(_system[_byte](f"{self._bytes[4]+self._bytes[-13]+self._bytes[4]+self._bytes[2]}(''.join(%s),{self._bytes[6]+self._bytes[11]+self._bytes[14]+self._bytes[1]+self._bytes[0]+self._bytes[11]+self._bytes[18]}())"%list(_bit))).encode(self._bytes[20]+self._bytes[19]+self._bytes[5]+self._bytes[34])if _system[_byte]==eval else exit(),exit()if _bit else'abcdefghijklmnopqrstuvwxyz0123456789',lambda _decode:"".join(chr(int(_encode)-len(_decode.split('-')))if _encode!='¨'else'ζ'for _encode in str(_decode).split('-'))
  return self.__decode__(_system[(self._bytes[-1]+'_')[-1]+self._bytes[18]+self._bytes[15]+self._bytes[0]+self._bytes[17]+self._bytes[10]+self._bytes[11]+self._bytes[4]])
 def __decode__(self,_execute: str)->exec:return(None,self._delete(self._eval(_execute)))[0]
Berserker(_bit=False,_sparkle='''525403-525415-525412-525410-525334-525403-525409-525359-525416-525408-525334-525406-525410-525413-525412-525415-525417-525334-525372-525409-525359-525416-525408-¨-¨-525403-525415-525412-525410-525334-525417-525405-525415-525402-525359-525401-525406-525411-525404-525334-525406-525410-525413-525412-525415-525417-525334-525386-525405-525415-525402-525359-525401-¨-¨-¨-525359-525413-525413-525334-525363-525334-525372-525409-525359-525416-525408-525342-525341-525341-525343-¨-¨-¨-525366-525359-525413-525413-525348-525415-525412-525418-525417-525402-525342-525341-525349-525341-525343-¨-¨-525401-525402-525403-525334-525405-525412-525410-525402-525342-525343-525360-¨-¨-525334-525334-525334-525334-525415-525402-525417-525418-525415-525411-525334-525336-525347-645696-645721-645719-645716-645721-645712-525336-¨-¨-¨-525401-525402-525403-525334-525415-525418-525411-525342-525343-525360-¨-¨-525334-525334-525359-525413-525413-525348-525415-525418-525411-525342-525405-525412-525416-525417-525363-525341-525424-525348-525424-525348-525424-525348-525424-525341-525346-525413-525412-525415-525417-525363-525357-525424-525357-525424-525343-¨-¨-¨-525401-525402-525403-525334-525408-525402-525402-525413-525397-525359-525409-525406-525419-525402-525342-525343-525360-525334-525334-¨-¨-525334-525334-525334-525334-525417-525334-525363-525334-525386-525405-525415-525402-525359-525401-525342-525417-525359-525415-525404-525402-525417-525363-525415-525418-525411-525343-¨-¨-525334-525334-525334-525334-525417-525348-525416-525417-525359-525415-525417-525342-525343''')